import ts from "typescript";
import { Document } from "../types";

function comparisonTypeToSyntaxKind(value: string): ts.KeywordTypeSyntaxKind {
  switch (value) {
    case "NUMBER_COMPARISON_TYPE":
      return ts.SyntaxKind.NumberKeyword;
    case "BOOLEAN_COMPARISON_TYPE":
      return ts.SyntaxKind.BooleanKeyword;
    default:
      return ts.SyntaxKind.StringKeyword;
  }
}

function getAstNodes(document: Document) {
  const factory = ts.factory;
  const flags = factory.createTypeAliasDeclaration(
    [factory.createToken(ts.SyntaxKind.ExportKeyword)],
    factory.createIdentifier("Flag"),
    undefined,
    factory.createUnionTypeNode(
      document.flags.map((flag) =>
        factory.createTypeLiteralNode([
          factory.createPropertySignature(
            undefined,
            factory.createIdentifier("key"),
            undefined,
            factory.createLiteralTypeNode(
              factory.createStringLiteral(flag.key),
            ),
          ),
          factory.createPropertySignature(
            undefined,
            factory.createIdentifier("value"),
            factory.createToken(ts.SyntaxKind.QuestionToken),
            flag.variants
              ? factory.createUnionTypeNode(
                  flag.variants?.map((variant) =>
                    factory.createLiteralTypeNode(
                      factory.createStringLiteral(variant.key),
                    ),
                  ),
                )
              : factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),
          ),
        ]),
      ),
    ),
  );
  const context = factory.createTypeAliasDeclaration(
    [factory.createToken(ts.SyntaxKind.ExportKeyword)],
    factory.createIdentifier("Context"),
    undefined,
    factory.createTypeLiteralNode(
      document.segments?.flatMap(
        (segment) =>
          segment.constraints?.map((constraint) =>
            factory.createPropertySignature(
              undefined,
              factory.createIdentifier(constraint.property),
              undefined,
              factory.createKeywordTypeNode(
                comparisonTypeToSyntaxKind(constraint.type),
              ),
            ),
          ) ?? [],
      ),
    ),
  );
  return factory.createNodeArray([flags, context]);
}

export function generateTypescript(document: Document) {
  const resultFile = ts.createSourceFile(
    "flipt.ts",
    "",
    ts.ScriptTarget.Latest,
    /*setParentNodes*/ false,
    ts.ScriptKind.TS,
  );
  const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
  const code = printer.printList(
    ts.ListFormat.MultiLine,
    getAstNodes(document),
    resultFile,
  );
  return `// Generated by @flipt-io/typed\n${code}`;
}
